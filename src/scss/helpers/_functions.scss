// =========================================================================
// Functions
// =========================================================================

// =========================================================================
// PX - REM
// =========================================================================

/*
    When using this function:
    Do : @include rem(margin-bottom, 2rem);
    Don't : @include rem(margin-bottom, 0rem);
    Don't cause unnessasary conversions as this is bad practice.
    It will also break future builds
*/

@function parseInt($n) {
	@return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
	$px : ();
	$rem: ();

	@each $value in $values {

		@if $value == 0 or $value == auto {
			$px : append($px , $value);
			$rem: append($rem, $value);
		}

		@else {
			$unit: unit($value);
			$val: parseInt($value);

			@if $unit == "px" {
				$px : append($px,  $value);
				$rem: append($rem, ($val / 10 + rem));
			}

			@if $unit == "rem" {
				$px : append($px,  ($val * 10 + px));
				$rem: append($rem, $value);
			}
		}
	}

	@if $px == $rem {
		#{$property}: $px;
	} @else {
		#{$property}: $px;
		#{$property}: $rem;
	}
}

// =========================================================================
// Grid
// =========================================================================

/*
    Change the column and gutter values to reflect the grid that is being used.
*/

$column-width: 80;
$gutter-width: 30;
$columns: 12;

@function gridsystem-width($columns:$columns) {
    @return ($column-width * $columns) + ($gutter-width * $columns);
}

$total-width: gridsystem-width($columns);

$min-width: 999999;
$correction: 0.5 / $min-width * 100;

@mixin column($x,$columns:$columns) {
    float: left;
    width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
    margin-left: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
    margin-right: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin push($offset:1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin pull($offset:1) {
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

$total-width: 100%;
