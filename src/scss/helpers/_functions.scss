// =========================================================================
// Functions
// =========================================================================

// =========================================================================
// PX - REM
// =========================================================================

/*
 * usage: @include x-rem(font-size, 14px);
 * usage: @include x-rem(margin, 0 12px 2 1.2);
 * usage: @include x-rem(padding, 1.5 24px);
 */
@mixin x-rem($property, $values) {

    $base-font-size: 16px; // should be consistent with your html/body font-size
    $px-values: ();
    $rem-values: ();

    @each $value in $values {

        @if $value == 0 or $value == 0px {
            $px-values: join($px-values, 0);
            $rem-values: join($rem-values, 0);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
            $new-rem-value: $value / $base-font-size;
            $px-values: join($px-values, round($value));
            $rem-values: join($rem-values, #{$new-rem-value}rem);
        } @else {
            $px-values: join($px-values, round($value * $base-font-size));
            $rem-values: join($rem-values, #{$value}rem);
        }

    }

    #{$property}: $px-values;
    #{$property}: $rem-values;

}

// =========================================================================
// Grid
// =========================================================================

/*
    Change the column and gutter values to reflect the grid that is being used.
*/

$column-width: 80;
$gutter-width: 30;
$columns: 12;

@function gridsystem-width($columns: $columns) {
    @return ($column-width * $columns) + ($gutter-width * $columns);
}

$total-width: gridsystem-width($columns);

$min-width: 999999;
$correction: .5 / $min-width * 100;

@mixin column($x, $columns: $columns) {
    float: left;
    width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
    margin-left: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
    margin-right: $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin push($offset: 1) {
    margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

@mixin pull($offset: 1) {
    margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

$total-width: 100%;

// =========================================================================
// Frame Animation
// =========================================================================

/*
    A Sass @mixin for creating traditional cel-based animations, especially with SVG.
    Think gifs, but scalable and with more control over combining animations together.

    @author Heydon Pickering

    @param {List} $cels - A list of integers representing "cels" in the order of the subject elements. Each integer represents the duration in frames for which the cel should be visible
    @param {Float} $frame-rate [0.25] - Duration of each frame's appearance
    @param {Bool} $alternate [false] - Whether the direction of the animation alternates, making the animation turn back on itself
    @param {Number | infinite} $iterations [infinite] - Number of times the animation happens, based on `animation-iteration-count`

    @example scss - Basic example: three cels appearing for one frame each
    .animation-name {
        @include cel-animation((1 1 1));
    }

    @example scss - Advanced example: 3 cels in a 6 frame animation, at a frame rate of 0.1 seconds. Each of the two iterations alternates (reverses back on itself)
    .animation-name {
        @include cel-animation((3 1 2)), 0.1, true, 2);
    }
*/

@mixin cel-animation($cels, $frame-rate: 0.25, $alternate: false, $iterations: infinite) {

    // Init frame count
    $frame-count: 0;

    // Get the frame count
    @each $cel in $cels {
        $frame-count: $frame-count + $cel;
    }

    // The mixin operates on its child "frames"
    > * {

        // set to invisible to start with
        opacity: 0;

        // you get the overall animation duration by multiplying
        // the number of frames by the frame rate (seconds)
        animation-duration: $frame-count * $frame-rate * 1s;

        // set alternating direction if true (which is default)
        @if $alternate {
            animation-direction: alternate;
        }

        // default is infinite
        animation-iteration-count: $iterations;

        // if alternating direction is true (above) and
        // iterations are not infinite, double the iterations
        // to treat a back-AND-forth as one iteration
        @if $iterations != infinite and $alternate {
            $iterations: $iterations * 2;
        }

        // Hard show/hide (no fading)
        animation-timing-function: steps(1);

    }

    // the fraction of 1 for which each frame is visible
    // eg. 0.333 if there are 3 frames
    $frame-fraction: 100 / $frame-count;

    // iterate over each integer in $cels
    @for $i from 1 through length($cels) {

        $name: unique-id();

        // init start variable
        $start: 0;

        // init count of frames before
        $frames-before: 0;

        // get the number of frames that have elapsed before
        // the current cel appears
        @for $cel from 1 to $i {
            @if ($i > 1) {
                $frames-before: $frames-before + nth($cels, $cel);
            }
        }

        // define start and end of animation
        $start: $frames-before * $frame-fraction;
        $end: $start + ($frame-fraction * nth($cels, $i));

        // generate dynamic keyframes declaration
        // based on sanitized class name + iteration number
        @keyframes cel-#{$name} {

            #{$start * 1%} {
                opacity: 1;
            }

            #{$end * 1%} {
                opacity: 0;
            }

        }

        // assign animation to each cel (child elem) in turn
        > :nth-child(#{$i}) {
            animation-name: cel-#{$name};
        }

    }

}
